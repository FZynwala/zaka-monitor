{"version":3,"sources":["../node_modules/react-semantic-ui-datepickers/dist/locales sync /^/.*/.json$","components/footer-menu-item/FooterMenuItem.js","components/footer-menu/FooterMenu.js","store/apis/dayApi.js","config/config.js","store/apis/namesApi.js","store/slices/index.js","store/index.js","components/header/Header.js","components/LoadingComponent.js","components/notifications/ErrorNotification.js","utils/index.js","components/rechart/Rechart.js","components/history-component/ui/HistoryComponentUi.js","components/history-component/HistoryComponent.js","components/card/Card.js","components/CardExtended.js","components/CardTempOut.js","components/sensors-list/ui/SensorsListUi.js","components/sensors-list/SensorList.js","components/Modal.js","components/settings/ui/SettingsUi.js","components/settings/Settings.js","components/ChartModal.js","components/show-chart/ui/ShowChartUi.js","components/show-chart/ShowChart.js","components/App.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","FooterMenuItem","icon","label","className","Icon","name","fitted","size","FooterMenu","to","dayApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","buldier","fetchToday","query","providesTags","url","method","fetchDayByDate","mutation","date","body","useFetchTodayQuery","useFetchDayByDateMutation","namesApi","useUpdateTodayMutation","fetchNames","changeNames","invalidatesTags","useFetchNamesQuery","useChangeNamesMutation","pathSlice","createSlice","initialState","path","reducers","changePath","state","action","payload","actions","pathReducer","reducer","store","configureStore","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","Header","useSelector","useDispatch","history","useHistory","style","marginTop","src","width","height","onClick","util","invalidateTags","push","LoadingComponent","display","justifyContent","alignItems","type","color","ErrorNotification","content","header","Message","negative","formatTime","time","moment","format","prepareRechartData","data","sensorName","isOldData","obj","temp","Number","tempOut","toDate","getTime","dateWithMixedTimeType","firstTempOutDate","firstSensor4Date","isBefore","Rechart","isHistory","isTempOut","xBegin","subtract","ResponsiveContainer","viewBox","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","strokeFill","XAxis","dataKey","domain","tickFormatter","unixTime","angle","textAnchor","allowDataOverflow","minTickGap","tickCount","tick","fill","tickLine","Tooltip","labelFormatter","labelStyle","Line","stroke","dot","strokeWidth","animationEasing","yAxisId","YAxis","orientation","Legend","verticalAlign","HistoryComponentUi","names","useState","isSensor1","isSensor2","isSensor3","isSensor4","values","setValues","showForm","setShowForm","isOldDataFormat","setIsOldDataFormat","showCheckboxes","setShowCheckboxes","day","isLoadingDay","isLoading","isErrorDay","isError","handleDateChange","event","a","value","isSameOrAfter","as","onChange","filterDate","isAfter","Form","Grid","columns","Column","Field","Checkbox","checked","b","c","textAlign","dividing","sensor01","sensor02","sensor03","sensor04","HistoryComponent","useRouteMatch","useEffect","Card","maxTemp","minTemp","title","renderMaxTemp","renderMinTemp","hum","CardExtended","props","isOpen","renderDoor","isLight","renderIsLightOn","CardTempOut","SensorsListUi","today","sensorsNames","length","SensorsList","isFetchingToday","isFetching","isErrorToday","isFetchingNames","Modal","initialValues","name1","name2","name3","handleSubmit","ReactDOM","createPortal","onDismiss","stopPropagation","onSubmit","document","querySelector","SettingsUi","Fragment","Settings","ChartModal","ShowChartUi","match","renderActions","params","getSensorName","yesterday","xData","yData","ShowChart","App","exact","component","dotenv","render"],"mappings":"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","file":"static/js/main.3bbffcca.chunk.js","sourcesContent":["var map = {\n\t\"./bg-BG.json\": 384,\n\t\"./ca-ES.json\": 385,\n\t\"./cs-CZ.json\": 386,\n\t\"./de-DE.json\": 387,\n\t\"./el-GR.json\": 388,\n\t\"./en-US.json\": 260,\n\t\"./es-ES.json\": 389,\n\t\"./et-EE.json\": 390,\n\t\"./fi-FI.json\": 391,\n\t\"./fr-FR.json\": 392,\n\t\"./he-IL.json\": 393,\n\t\"./it-IT.json\": 394,\n\t\"./ja-JP.json\": 395,\n\t\"./ko-KR.json\": 396,\n\t\"./nb-NO.json\": 397,\n\t\"./nl-NL.json\": 398,\n\t\"./nn-NO.json\": 399,\n\t\"./pl-PL.json\": 400,\n\t\"./pt-BR.json\": 401,\n\t\"./ro-RO.json\": 402,\n\t\"./ru-RU.json\": 403,\n\t\"./sk-SK.json\": 404,\n\t\"./sv-SE.json\": 405,\n\t\"./tr-TR.json\": 406,\n\t\"./zh-CN.json\": 407\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 383;","import React from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport './FooterMenuItem.css';\r\n\r\nconst FooterMenuItem = ({ icon, label }) => {\r\n    return (\r\n        <div className={'footer-menu-item'}>\r\n            <Icon name={icon} fitted={true} size={'large'} />\r\n            {/* <div className={'label'}>{label}</div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FooterMenuItem;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport FooterMenuItem from '../footer-menu-item/FooterMenuItem';\r\nimport './FooterMenu.css';\r\n\r\nconst FooterMenu = ({}) => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <Link to={'/history'}>\r\n                <FooterMenuItem icon={'history'} label={'historia'} />\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FooterMenu;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { baseApiUrl } from '../../config/config';\r\n\r\nexport const dayApi = createApi({\r\n    reducerPath: 'day',\r\n    baseQuery: fetchBaseQuery({\r\n        baseUrl: baseApiUrl,\r\n    }),\r\n    endpoints(buldier) {\r\n        return {\r\n            fetchToday: buldier.query({\r\n                providesTags: ['TODAY'],\r\n                query: () => {\r\n                    return {\r\n                        url: '/',\r\n                        method: 'GET',\r\n                    };\r\n                },\r\n            }),\r\n            fetchDayByDate: buldier.mutation({\r\n                query: (date) => {\r\n                    return {\r\n                        url: '/day',\r\n                        method: 'POST',\r\n                        body: { date },\r\n                    };\r\n                },\r\n            }),\r\n        };\r\n    },\r\n});\r\n\r\nexport const { useFetchTodayQuery, useFetchDayByDateMutation, useUpdateTodayMutation } = dayApi;\r\n","const herokuURL = 'https://desolate-tor-57356.herokuapp.com/';\r\nconst localhost = 'http://localhost:8000';\r\nconst renderUrl = 'https://zaka-monitor-api.onrender.com';\r\nconst devRenderUrl = 'https://dev-zaka-monitor-api.onrender.com';\r\n\r\nexport const baseApiUrl = localhost;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { baseApiUrl } from '../../config/config';\r\n\r\nexport const namesApi = createApi({\r\n    reducerPath: 'names',\r\n    baseQuery: fetchBaseQuery({\r\n        baseUrl: baseApiUrl,\r\n    }),\r\n    endpoints(buldier) {\r\n        return {\r\n            fetchNames: buldier.query({\r\n                providesTags: ['NAMES'],\r\n                query: () => {\r\n                    return {\r\n                        url: '/sensor',\r\n                        method: 'GET',\r\n                    };\r\n                },\r\n            }),\r\n            changeNames: buldier.mutation({\r\n                invalidatesTags: ['NAMES'],\r\n                query: (body) => {\r\n                    return {\r\n                        url: '/sensor',\r\n                        method: 'POST',\r\n                        body: body,\r\n                    };\r\n                },\r\n            }),\r\n        };\r\n    },\r\n});\r\n\r\nexport const { useFetchNamesQuery, useChangeNamesMutation } = namesApi;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst pathSlice = createSlice({\r\n    name: 'path',\r\n    initialState: {\r\n        path: '/',\r\n    },\r\n    reducers: {\r\n        changePath(state, action) {\r\n            state.path = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { changePath } = pathSlice.actions;\r\nexport const pathReducer = pathSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { setupListeners } from '@reduxjs/toolkit/dist/query';\r\nimport { dayApi } from './apis/dayApi';\r\nimport { namesApi } from './apis/namesApi.js';\r\nimport { pathReducer } from './slices';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        [dayApi.reducerPath]: dayApi.reducer,\r\n        [namesApi.reducerPath]: namesApi.reducer,\r\n        path: pathReducer,\r\n    },\r\n    middleware: (getDefaultMiddleware) => {\r\n        return getDefaultMiddleware().concat(dayApi.middleware).concat(namesApi.middleware);\r\n    },\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n\r\nexport { dayApi } from './apis/dayApi';\r\nexport { useFetchDayByDateMutation, useFetchTodayQuery } from './apis/dayApi.js';\r\nexport { useChangeNamesMutation, useFetchNamesQuery } from './apis/namesApi.js';\r\nexport { changePath } from './slices';\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { changePath, dayApi } from '../../store';\r\nimport './Header.css';\r\n\r\nexport const Header = () => {\r\n    const { path } = useSelector((state) => state.path);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const onFetchClick = () => {\r\n        dispatch(dayApi.util.invalidateTags(['TODAY']));\r\n    };\r\n\r\n    const onBackClick = () => {\r\n        history.push('/');\r\n        dispatch(changePath('/'));\r\n    };\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <h2 className=\"ui center aligned header font\" style={{ marginTop: '5px' }}>\r\n                <div className=\"image-header\">\r\n                    <img src=\"./zaka-monitor-logo.png\" width={150} height={91} />\r\n                </div>\r\n                ZAKA MONITOR\r\n            </h2>\r\n            <div className=\"button-margins\">\r\n                {path !== '/history' ? (\r\n                    <button onClick={onFetchClick} className=\"ui green button\">\r\n                        <i className=\"sync icon large u-mr\"></i>\r\n                    </button>\r\n                ) : (\r\n                    <button onClick={onBackClick} className=\"ui gray button\">\r\n                        <Icon name={'backward'} size={'large'} fitted />\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport const LoadingComponent = () => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                height: \"100\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                marginTop: \"30%\",\r\n            }}\r\n        >\r\n            <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\nimport './ErrorNotification.css';\r\n\r\nexport const ErrorNotification = ({ content, header }) => {\r\n    return (\r\n        <>\r\n            <Message negative className={'u-mh'}>\r\n                <Message.Header>{header}</Message.Header>\r\n                <p>{content}</p>\r\n            </Message>\r\n        </>\r\n    );\r\n};\r\n","import moment from 'moment';\r\n\r\nexport const formatTime = (time) => moment(time).format('HH:mm');\r\n\r\nexport const prepareRechartData = (data, sensorName, isOldData) => {\r\n    return data.map((obj) => {\r\n        if (sensorName === 'sensor03') {\r\n            return {\r\n                ...obj,\r\n                temp: Number(obj.temp),\r\n                tempOut: Number(obj.tempOut),\r\n                time: isOldData ? moment(obj.time, 'HH:mm').toDate().getTime() : moment(obj.time).toDate().getTime(),\r\n            };\r\n        } else {\r\n            return {\r\n                ...obj,\r\n                temp: Number(obj.temp),\r\n                time: isOldData ? moment(obj.time, 'HH:mm').toDate().getTime() : moment(obj.time).toDate().getTime(),\r\n            };\r\n        }\r\n    });\r\n};\r\n\r\nexport const dateWithMixedTimeType = moment('23.12.2022', 'DD.MM.YYYY');\r\nexport const firstTempOutDate = moment('13.06.2020', 'DD.MM.YYYY');\r\nexport const firstSensor4Date = moment('27.12.2022', 'DD.MM.YYYY');\r\n\r\nexport const isOldData = (date) => moment(date, 'DD.MM.YYYY').isBefore(dateWithMixedTimeType);\r\n\r\nexport const textColor = '#aeb1ba';\r\n","import moment from 'moment';\r\nimport React from 'react';\r\n// import './index.css';\r\n\r\nimport { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\r\n\r\nexport const Rechart = ({ data, type, isHistory = false, isTempOut = false }) => {\r\n    const xBegin = isHistory ? 'dataMin' : moment().subtract(1, 'days').toDate().getTime();\r\n    const tickColor = '#aeb1ba';\r\n\r\n    return (\r\n        <div>\r\n            <ResponsiveContainer width=\"100%\" height={200} viewBox={'10 0 320 200'}>\r\n                <LineChart\r\n                    margin={{ top: 20, right: 1, left: -10, bottom: 11 }}\r\n                    data={data}\r\n                    viewBox={'10 0 320 200'}\r\n                    className={'u-color-chart'}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" strokeFill={tickColor} />\r\n                    <XAxis\r\n                        dataKey=\"time\"\r\n                        domain={[xBegin, 'dataMax']}\r\n                        name=\"Time\"\r\n                        tickFormatter={(unixTime) => moment(unixTime).format('HH:mm')}\r\n                        type=\"number\"\r\n                        angle={-50}\r\n                        textAnchor={'end'}\r\n                        allowDataOverflow={true}\r\n                        minTickGap={2}\r\n                        tickCount={6}\r\n                        tick={{ fill: tickColor, tickLine: tickColor }}\r\n                    />\r\n                    <Tooltip\r\n                        labelFormatter={(unixTime) => moment(unixTime).format('HH:mm')}\r\n                        labelStyle={{ 'font-weight': 'bold' }}\r\n                    />\r\n                    <Line\r\n                        type=\"natural\"\r\n                        dataKey={type}\r\n                        stroke=\"#8884d8\"\r\n                        dot={false}\r\n                        strokeWidth={2}\r\n                        animationEasing={'ease-in-out'}\r\n                        name={type}\r\n                        yAxisId={'yTemp'}\r\n                    />\r\n                    {isHistory && !isTempOut && (\r\n                        <>\r\n                            <Line\r\n                                type=\"natural\"\r\n                                dataKey={'hum'}\r\n                                stroke=\"#54a0ff\"\r\n                                dot={false}\r\n                                strokeWidth={2}\r\n                                animationEasing={'ease-in-out'}\r\n                                name={'hum'}\r\n                                yAxisId={'yHum'}\r\n                            />\r\n                            <YAxis\r\n                                yAxisId={'yHum'}\r\n                                orientation={'right'}\r\n                                domain={['dataMin', 'dataMax']}\r\n                                type={'number'}\r\n                                tick={{ fill: tickColor, tickLine: tickColor }}\r\n                            />\r\n                            <Legend verticalAlign=\"top\" height={36} />\r\n                        </>\r\n                    )}\r\n                    <YAxis\r\n                        yAxisId={'yTemp'}\r\n                        orientation={'left'}\r\n                        domain={['dataMin', 'dataMax']}\r\n                        type={'number'}\r\n                        tick={{ fill: tickColor, tickLine: tickColor }}\r\n                    />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n};\r\n","import moment from 'moment';\r\nimport React, { useState } from 'react';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport { Checkbox, Form, Grid, Header } from 'semantic-ui-react';\r\nimport { useFetchDayByDateMutation } from '../../../store';\r\nimport { firstSensor4Date, firstTempOutDate, isOldData, prepareRechartData } from '../../../utils';\r\nimport { LoadingComponent } from '../../LoadingComponent';\r\nimport { ErrorNotification } from '../../notifications/ErrorNotification';\r\nimport { Rechart } from '../../rechart/Rechart';\r\nimport '../HistoryComponent.css';\r\n\r\nexport const HistoryComponentUi = ({ names }) => {\r\n    const [values, setValues] = useState({\r\n        isSensor1: false,\r\n        isSensor2: false,\r\n        isSensor3: false,\r\n        isTempOut: false,\r\n        isSensor4: false,\r\n    });\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [isOldDataFormat, setIsOldDataFormat] = useState(false);\r\n    const [showCheckboxes, setShowCheckboxes] = useState({\r\n        isSensor1: false,\r\n        isSensor2: false,\r\n        isSensor3: false,\r\n        isTempOut: false,\r\n        isSensor4: false,\r\n    });\r\n    const [fetchDayByDate, { data: day, isLoading: isLoadingDay, isError: isErrorDay }] = useFetchDayByDateMutation();\r\n\r\n    const handleDateChange = async (event, data) => {\r\n        if (isOldData(data.value)) setIsOldDataFormat(true);\r\n        else setIsOldDataFormat(false);\r\n\r\n        await fetchDayByDate(moment(data.value).format('D.M.YYYY'));\r\n        setShowForm(true);\r\n        setShowCheckboxes({\r\n            isSensor1: true,\r\n            isSensor2: true,\r\n            isSensor3: moment(data.value).isSameOrAfter(firstTempOutDate),\r\n            isTempOut: moment(data.value).isSameOrAfter(firstTempOutDate),\r\n            isSensor4: moment(data.value).isSameOrAfter(firstSensor4Date),\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"layout u-mt\">\r\n            <Header as={'h2'} className={'u-text-color layout'}>\r\n                <span className=\"u-mt-l\">Historia</span>\r\n            </Header>\r\n            <SemanticDatepicker\r\n                onChange={handleDateChange}\r\n                filterDate={(date) =>\r\n                    moment(date).isAfter('2019-12-23', 'YYYY-MM-DD') && moment(date).isBefore(moment())\r\n                }\r\n            />\r\n            {isLoadingDay ? (\r\n                <LoadingComponent />\r\n            ) : isErrorDay ? (\r\n                <ErrorNotification\r\n                    content={'Błąd przy pobieraniu danego dnia. Spróbuj ponownie za chwile.'}\r\n                    header={'Błąd połączenia!'}\r\n                />\r\n            ) : (\r\n                <>\r\n                    {showForm && (\r\n                        <Form className=\"font-stylesd u-mt u-text-color\">\r\n                            <Grid columns={'equal'}>\r\n                                <Grid.Column>\r\n                                    <Form.Field>\r\n                                        <Checkbox\r\n                                            label={names.a.name}\r\n                                            name=\"sensor1\"\r\n                                            value={values.isSensor1}\r\n                                            checked={values.isSensor1 === true}\r\n                                            onChange={(e, data) =>\r\n                                                setValues({ ...values, isSensor1: !values.isSensor1 })\r\n                                            }\r\n                                            className={'u-text-color'}\r\n                                        />\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <Checkbox\r\n                                            label={names.b.name}\r\n                                            name=\"sensor2\"\r\n                                            value={values.isSensor2}\r\n                                            checked={values.isSensor2 === true}\r\n                                            onChange={(e, data) =>\r\n                                                setValues({ ...values, isSensor2: !values.isSensor2 })\r\n                                            }\r\n                                        />\r\n                                    </Form.Field>\r\n                                </Grid.Column>\r\n                                {showCheckboxes.isTempOut && (\r\n                                    <Grid.Column>\r\n                                        <Form.Field>\r\n                                            <Checkbox\r\n                                                label=\"Garaż\"\r\n                                                name=\"sensor3\"\r\n                                                value={values.isSensor3}\r\n                                                checked={values.isSensor3 === true}\r\n                                                onChange={(e, data) =>\r\n                                                    setValues({ ...values, isSensor3: !values.isSensor3 })\r\n                                                }\r\n                                            />\r\n                                        </Form.Field>\r\n                                        <Form.Field>\r\n                                            <Checkbox\r\n                                                label=\"Na zewnątrz\"\r\n                                                name=\"tempOut\"\r\n                                                value={values.isTempOut}\r\n                                                checked={values.isTempOut === true}\r\n                                                onChange={(e, data) =>\r\n                                                    setValues({ ...values, isTempOut: !values.isTempOut })\r\n                                                }\r\n                                            />\r\n                                        </Form.Field>\r\n                                    </Grid.Column>\r\n                                )}\r\n                                {showCheckboxes.isSensor4 && (\r\n                                    <Grid.Column>\r\n                                        <Form.Field>\r\n                                            <Checkbox\r\n                                                label={names.c.name}\r\n                                                name=\"sensor4\"\r\n                                                value={values.isSensor4}\r\n                                                checked={values.isSensor4 === true}\r\n                                                onChange={(e, data) =>\r\n                                                    setValues({ ...values, isSensor4: !values.isSensor4 })\r\n                                                }\r\n                                            />\r\n                                        </Form.Field>\r\n                                    </Grid.Column>\r\n                                )}\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                    <div className=\"rechart-container u-mt\">\r\n                        {values.isSensor1 && (\r\n                            <>\r\n                                <Header textAlign={'center'} dividing={true} className={'u-mb-non u-text-color'}>\r\n                                    {names.a.name}\r\n                                </Header>\r\n                                <Rechart\r\n                                    data={prepareRechartData(day.sensor01, 'sensor01', isOldDataFormat)}\r\n                                    type={'temp'}\r\n                                    isHistory={true}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {values.isSensor2 && (\r\n                            <>\r\n                                <Header textAlign={'center'} dividing={true} className={'u-mb-non u-text-color'}>\r\n                                    {names.b.name}\r\n                                </Header>\r\n                                <Rechart\r\n                                    data={prepareRechartData(day.sensor02, 'sensor02', isOldDataFormat)}\r\n                                    type={'temp'}\r\n                                    isHistory={true}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {values.isSensor3 && showCheckboxes.isSensor3 && (\r\n                            <>\r\n                                <Header textAlign={'center'} dividing={true} className={'u-mb-non u-text-color'}>\r\n                                    Garaż\r\n                                </Header>\r\n                                <Rechart\r\n                                    data={prepareRechartData(day.sensor03, 'sensor03', isOldDataFormat)}\r\n                                    type={'temp'}\r\n                                    isHistory={true}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {values.isSensor4 && showCheckboxes.isSensor4 && (\r\n                            <>\r\n                                <Header textAlign={'center'} dividing={true} className={'u-mb-non u-text-color'}>\r\n                                    {names.c.name}\r\n                                </Header>\r\n                                <Rechart\r\n                                    data={prepareRechartData(day.sensor04, 'sensor04', isOldDataFormat)}\r\n                                    type={'temp'}\r\n                                    isHistory={true}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        {values.isTempOut && showCheckboxes.isTempOut && (\r\n                            <>\r\n                                <Header textAlign={'center'} dividing={true} className={'u-mb-non u-text-color'}>\r\n                                    Na zewnątrz\r\n                                </Header>\r\n                                <div className=\"u-mr\">\r\n                                    <Rechart\r\n                                        data={prepareRechartData(day.sensor03, 'sensor03', isOldDataFormat)}\r\n                                        type={'tempOut'}\r\n                                        isHistory={true}\r\n                                        isTempOut\r\n                                    />\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n            <div className=\"empty-space-large\"></div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useRouteMatch } from 'react-router-dom';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport { changePath, useFetchNamesQuery } from '../../store';\r\nimport { LoadingComponent } from '../LoadingComponent';\r\nimport { ErrorNotification } from '../notifications/ErrorNotification';\r\nimport './HistoryComponent.css';\r\nimport { HistoryComponentUi } from './ui/HistoryComponentUi';\r\n\r\nexport const HistoryComponent = () => {\r\n    const { data: names, isLoading, isError } = useFetchNamesQuery();\r\n    const match = useRouteMatch();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(changePath('/history'));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingComponent />\r\n            ) : isError ? (\r\n                <ErrorNotification\r\n                    content={'Błąd połączenia. Spróbuj ponownie za chwile.'}\r\n                    header={'Błąd połączenia'}\r\n                />\r\n            ) : (\r\n                <HistoryComponentUi names={names} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import moment from 'moment';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatTime } from '../../utils';\r\nimport './Card.css';\r\n\r\nexport const Card = ({ data, maxTemp, minTemp, title, id, history, name }) => {\r\n    const renderMaxTemp = (temp) => {\r\n        if (temp) {\r\n            const maxTemp = temp.maxTemp;\r\n            const time = moment(temp.time).format('HH:mm');\r\n            return { maxTemp, time };\r\n        }\r\n\r\n        return 'Loading...';\r\n    };\r\n\r\n    const renderMinTemp = (temp) => {\r\n        if (temp) {\r\n            const minTemp = temp.minTemp;\r\n            const time = moment(temp.time).format('HH:mm');\r\n            return { minTemp, time };\r\n        }\r\n\r\n        return 'Loding...';\r\n    };\r\n\r\n    const dotColor = () => {\r\n        if (id === '1') {\r\n            return 'yellow';\r\n        } else if (id === '2') {\r\n            return 'blue';\r\n        } else if (id === '5') {\r\n            return 'purple';\r\n        }\r\n    };\r\n\r\n    const onSettingClick = () => {\r\n        history.push('/settings');\r\n    };\r\n\r\n    if (data) {\r\n        var { temp, time, hum } = data;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card background-color\">\r\n                <div className=\"content\">\r\n                    <div className=\"right floated mini ui header\">\r\n                        <span className=\"temp-header\">{temp ? `${temp} \\u2103` : '----'}</span>\r\n                    </div>\r\n                    <div className=\"header\">{name}</div>\r\n                    <div className=\"meta\">ID czujnika: {id}</div>\r\n                    <div className=\"description\">\r\n                        Wilgotność: {hum ? `${hum}%` : '--'} <br />\r\n                        <span className=\"max-data\">\r\n                            Max: {renderMaxTemp(maxTemp).maxTemp ? `${renderMaxTemp(maxTemp).maxTemp} \\u2103` : '--'}\r\n                            <span className=\"time\">\r\n                                o godz: {renderMaxTemp(maxTemp).time ? `${renderMaxTemp(maxTemp).time}` : '--:--'}{' '}\r\n                            </span>\r\n                            <br />\r\n                        </span>\r\n                        <span className=\"min-data\">\r\n                            Min: {renderMinTemp(minTemp).minTemp ? `${renderMinTemp(minTemp).minTemp} \\u2103` : '--'}\r\n                            <span className=\"time\">\r\n                                o godz: {renderMinTemp(minTemp).time ? `${renderMinTemp(minTemp).time}` : '--:--'}{' '}\r\n                            </span>\r\n                            <br />\r\n                        </span>\r\n                        Czas: {`${formatTime(time)}`} <br />\r\n                    </div>\r\n                    <div className=\"extra content\">\r\n                        <div className=\"right floated top-margin\">\r\n                            <Link to={`/chart/temp/${id}`} className=\"ui green button\">\r\n                                Wykres\r\n                            </Link>\r\n                        </div>\r\n                        <div onClick={onSettingClick} className=\"left floated\">\r\n                            <div className={`dot-${dotColor()}`}></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatTime } from '../utils';\r\nimport './card/Card.css';\r\n\r\nexport const CardExtended = (props) => {\r\n    const renderMaxTemp = () => {\r\n        if (props.maxTemp) {\r\n            var maxTemp = props.maxTemp.maxTemp;\r\n            var time = formatTime(props.maxTemp.time);\r\n            return { maxTemp, time };\r\n        }\r\n\r\n        return 'Loading...';\r\n    };\r\n\r\n    const renderMinTemp = () => {\r\n        if (props.minTemp) {\r\n            var minTemp = props.minTemp.minTemp;\r\n            var time = formatTime(props.minTemp.time);\r\n            return { minTemp, time };\r\n        }\r\n\r\n        return 'Loding...';\r\n    };\r\n\r\n    const renderDoor = () => {\r\n        if (props.data) return props.data.isOpen ? 'otwarte' : 'zamknięte';\r\n    };\r\n\r\n    const renderIsLightOn = () => {\r\n        if (props.data) {\r\n            return props.data.isLight ? 'ON' : 'OFF';\r\n        }\r\n    };\r\n\r\n    const dotColor = () => {\r\n        if (props.id === '1') {\r\n            return 'yellow';\r\n        } else if (props.id === '2') {\r\n            return 'blue';\r\n        } else if (props.id === '3') {\r\n            return 'black';\r\n        }\r\n    };\r\n\r\n    const onSettingClick = () => {\r\n        props.history.push('/settings');\r\n    };\r\n\r\n    if (props.data) {\r\n        var { temp, time, hum } = props.data;\r\n    }\r\n\r\n    return (\r\n        <div className=\"card background-color\">\r\n            <div className=\"content\">\r\n                <div className=\"right floated mini ui header\">\r\n                    <span className=\"temp-header\">{`${temp} \\u2103`}</span>\r\n                </div>\r\n                <div className=\"header\">Garaż</div>\r\n                <div className=\"meta\">ID czujnika: {props.id}</div>\r\n                <div className=\"description\">\r\n                    Wilgotność: {`${hum}%`} <br />\r\n                    <span className=\"max-data\">\r\n                        Max: {`${renderMaxTemp().maxTemp} \\u2103`}\r\n                        <span className=\"time\">o godz: {`${renderMaxTemp().time}`} </span>\r\n                        <br />\r\n                    </span>\r\n                    <span className=\"min-data\">\r\n                        Min: {`${renderMinTemp().minTemp} \\u2103`}\r\n                        <span className=\"time\">o godz: {`${renderMinTemp().time}`} </span>\r\n                        <br />\r\n                    </span>\r\n                    Drzwi: {renderDoor()} <br />\r\n                    Światło: {renderIsLightOn()} <br />\r\n                    Czas: {`${formatTime(time)}`} <br />\r\n                </div>\r\n                <div className=\"extra content\">\r\n                    <div className=\"right floated top-margin\">\r\n                        <Link to={`/chart/temp/${props.id}`} className=\"ui green button\">\r\n                            Wykres\r\n                        </Link>\r\n                    </div>\r\n                    <div onClick={onSettingClick} className=\"left floated\">\r\n                        <div className={`dot-${dotColor()}`}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { formatTime } from '../utils';\r\nimport './card/Card.css';\r\n\r\nexport const CardTempOut = (props) => {\r\n    const renderMaxTemp = () => {\r\n        if (props.maxTemp) {\r\n            var maxTemp = props.maxTemp.maxTemp;\r\n            var time = formatTime(props.maxTemp.time);\r\n            return { maxTemp, time };\r\n        }\r\n\r\n        return 'Loading...';\r\n    };\r\n\r\n    const renderMinTemp = () => {\r\n        if (props.minTemp) {\r\n            var minTemp = props.minTemp.minTemp;\r\n            var time = formatTime(props.minTemp.time);\r\n            return { minTemp, time };\r\n        }\r\n\r\n        return 'Loding...';\r\n    };\r\n\r\n    const dotColor = () => {\r\n        if (props.id === '1') {\r\n            return 'yellow';\r\n        } else if (props.id === '2') {\r\n            return 'blue';\r\n        } else if (props.id === '3' || props.id === '4') {\r\n            return 'black';\r\n        }\r\n    };\r\n\r\n    const onSettingClick = () => {\r\n        props.history.push('/settings');\r\n    };\r\n\r\n    if (props.data) {\r\n        var { tempOut, time } = props.data;\r\n    }\r\n\r\n    return (\r\n        <div className=\"card background-color\">\r\n            <div className=\"content\">\r\n                <div className=\"right floated mini ui header\">\r\n                    <span className=\"temp-header\">{`${tempOut} \\u2103`}</span>\r\n                </div>\r\n                <div className=\"header\">Na zewnątrz:</div>\r\n                <div className=\"meta\">ID czujnika: {props.id}</div>\r\n                <div className=\"description\">\r\n                    <span className=\"max-data\">\r\n                        Max: {renderMaxTemp().maxTemp ? `${renderMaxTemp().maxTemp} \\u2103` : '--'}\r\n                        <span className=\"time\">o godz: {`${renderMaxTemp().time}`} </span>\r\n                        <br />\r\n                    </span>\r\n                    <span className=\"min-data\">\r\n                        Min: {renderMinTemp().minTemp ? `${renderMinTemp().minTemp} \\u2103` : '--'}\r\n                        <span className=\"time\">\r\n                            o godz: {renderMinTemp().time ? `${renderMinTemp().time}` : '--:--'}{' '}\r\n                        </span>\r\n                        <br />\r\n                    </span>\r\n                    Czas: {`${formatTime(time)}`} <br />\r\n                </div>\r\n                <div className=\"extra content\">\r\n                    <div className=\"right floated top-margin\">\r\n                        <Link to={`/chart/temp/${props.id}`} className=\"ui green button\">\r\n                            Wykres\r\n                        </Link>\r\n                    </div>\r\n                    <div onClick={onSettingClick} className=\"left floated\">\r\n                        <div className={`dot-${dotColor()}`}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Card } from '../../card/Card';\r\nimport { CardExtended } from '../../CardExtended';\r\nimport { CardTempOut } from '../../CardTempOut';\r\nimport '../SensorList.css';\r\n\r\nexport const SensorsListUi = ({ today, sensorsNames }) => {\r\n    const history = useHistory();\r\n    return (\r\n        <>\r\n            <div className=\"ui cards\">\r\n                <Card\r\n                    data={today.sensor01[today.sensor01.length - 1]}\r\n                    maxTemp={today.maxTemp.sensor01}\r\n                    minTemp={today.minTemp.sensor01}\r\n                    title=\"Sensor A\"\r\n                    id=\"1\"\r\n                    history={history}\r\n                    name={sensorsNames.a.name}\r\n                />\r\n                <Card\r\n                    data={today.sensor02[today.sensor02.length - 1]}\r\n                    maxTemp={today.maxTemp.sensor02}\r\n                    minTemp={today.minTemp.sensor02}\r\n                    title=\"Sensor B\"\r\n                    id=\"2\"\r\n                    history={history}\r\n                    name={sensorsNames.b.name}\r\n                />\r\n                <CardExtended\r\n                    data={today.sensor03[today.sensor03.length - 1]}\r\n                    maxTemp={today.maxTemp.sensor03}\r\n                    minTemp={today.minTemp.sensor03}\r\n                    title=\"Sensor C\"\r\n                    id=\"3\"\r\n                    history={history}\r\n                    name=\"Garaz\"\r\n                />\r\n                <CardTempOut\r\n                    data={today.sensor03[today.sensor03.length - 1]}\r\n                    maxTemp={today.maxTemp.tempOut}\r\n                    minTemp={today.minTemp.tempOut}\r\n                    id=\"4\"\r\n                    history={history}\r\n                />\r\n                <Card\r\n                    data={today.sensor04[today.sensor04.length - 1]}\r\n                    maxTemp={today.maxTemp.sensor04}\r\n                    minTemp={today.minTemp.sensor04}\r\n                    title=\"Sensor B\"\r\n                    id=\"5\"\r\n                    history={history}\r\n                    name={sensorsNames.c.name}\r\n                    className={'u-mb'}\r\n                />\r\n                <div className=\"empty-space\"></div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useFetchNamesQuery, useFetchTodayQuery } from '../../store';\r\nimport { LoadingComponent } from '../LoadingComponent';\r\nimport { ErrorNotification } from '../notifications/ErrorNotification';\r\nimport { SensorsListUi } from './ui/SensorsListUi';\r\n\r\nexport const SensorsList = () => {\r\n    const { data, isFetching: isFetchingToday, isError: isErrorToday } = useFetchTodayQuery();\r\n    const { data: sensorsNames, isFetching: isFetchingNames, isError: isErrorNames } = useFetchNamesQuery();\r\n\r\n    const isError = isErrorNames || isErrorToday;\r\n    const isFetching = isFetchingToday || isFetchingNames;\r\n\r\n    return (\r\n        <>\r\n            {isFetching ? (\r\n                <LoadingComponent />\r\n            ) : isError ? (\r\n                <ErrorNotification\r\n                    content={'Błąd połączenia. Spróbuj ponownie za chwile.'}\r\n                    header={'Błąd połączenia'}\r\n                />\r\n            ) : (\r\n                <SensorsListUi today={data.today} sensorsNames={sensorsNames} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useChangeNamesMutation } from '../store';\r\nimport './Modal.css';\r\n\r\nexport const Modal = (props) => {\r\n    const [changeNames] = useChangeNamesMutation();\r\n\r\n    const initialValues = {\r\n        name1: props.names.a.name,\r\n        name2: props.names.b.name,\r\n        name3: props.names.c.name,\r\n    };\r\n\r\n    const handleSubmit = async (values) => {\r\n        const body = {\r\n            name1: values.name1,\r\n            name2: values.name2,\r\n            name3: values.name3,\r\n        };\r\n        await changeNames(body);\r\n\r\n        props.history.push('/');\r\n    };\r\n\r\n    return ReactDOM.createPortal(\r\n        <div onClick={props.onDismiss} className=\"ui dimmer modals visible active\">\r\n            <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n                <div className=\"header\">Zmień nazwę czujnika</div>\r\n                <div className=\"content\">\r\n                    <Formik initialValues={initialValues} onSubmit={handleSubmit}>\r\n                        <Form className=\"ui form\">\r\n                            <label className=\"u-mb-small\">{'Nazwa czujnika 1:'}</label>\r\n                            <Field name=\"name1\" className=\"u-mb-small\" />\r\n                            <label className=\"u-mb-small\">{'Nazwa czujnika 2:'}</label>\r\n                            <Field name=\"name2\" className=\"u-mb-small\" />\r\n                            <label className=\"u-mb-small\">{'Nazwa czujnika 3:'}</label>\r\n                            <Field name=\"name3\" className=\"u-mb-l\" />\r\n                            <div className=\"actions\">\r\n                                <button type={'submit'} className=\"ui black button\">\r\n                                    Zapisz\r\n                                </button>\r\n                            </div>\r\n                        </Form>\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </div>,\r\n        document.querySelector('#modal'),\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nimport { Modal } from '../../Modal';\r\n\r\nexport const SettingsUi = (props) => {\r\n    const history = useHistory();\r\n    const renderActions = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Link to={`/`} onClick={props.onSubmit} className=\"ui black button\">\r\n                    Zapisz\r\n                </Link>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Modal actions={renderActions()} onDismiss={() => history.push('/')} history={history} names={props.names} />\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useFetchNamesQuery } from '../../store';\r\nimport { LoadingComponent } from '../LoadingComponent';\r\n\r\nimport { SettingsUi } from './ui/SettingsUi';\r\n\r\nexport const Settings = (props) => {\r\n    const { data: names, isLoading } = useFetchNamesQuery();\r\n\r\n    return <>{isLoading ? <LoadingComponent /> : <SettingsUi names={names} />}</>;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './ChartModal.css';\r\nimport { Rechart } from './rechart/Rechart';\r\n\r\nconst ChartModal = ({ data, type, actions, onDismiss }) => {\r\n    const tempTitle = 'Temperatura w \\u2103';\r\n    const humTitle = 'Wilgotność w %';\r\n\r\n    return ReactDOM.createPortal(\r\n        <div onClick={onDismiss} className=\"ui dimmer modals visible active\">\r\n            <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n                <div className=\"header\">Wykres - ostatnie 24h</div>\r\n                <div className=\"content\">\r\n                    <div className=\"chart-title\">\r\n                        <h4>{type === 'temp' || type === 'tempOut' ? tempTitle : humTitle}</h4>\r\n                    </div>\r\n                    <Rechart data={data} type={type} />\r\n                </div>\r\n                <div className=\"actions\">{actions}</div>\r\n            </div>\r\n        </div>,\r\n        document.querySelector('#modal'),\r\n    );\r\n};\r\n\r\nexport default ChartModal;\r\n\r\n{\r\n    /* <Modal\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            // trigger={<Button>Wykres</Button>}\r\n        >\r\n            <Modal.Header>Select a Photo</Modal.Header>\r\n            <Modal.Content image>\r\n                <Rechart data={props.data} />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color=\"green\" onClick={() => setOpen(false)}>\r\n                    Wilgotność\r\n                </Button>\r\n                <Button content=\"Temperatura\" onClick={() => setOpen(false)} color={'green'} />\r\n            </Modal.Actions>\r\n        </Modal> */\r\n}\r\n","import React from 'react';\r\nimport { Link, useHistory, useRouteMatch } from 'react-router-dom';\r\nimport { isOldData, prepareRechartData } from '../../../utils';\r\nimport ChartModal from '../../ChartModal';\r\nimport '../ShowChart.css';\r\n\r\nexport const ShowChartUi = (props) => {\r\n    const match = useRouteMatch();\r\n    const history = useHistory();\r\n\r\n    const renderActions = () => {\r\n        if (match.params.id === '4') {\r\n            return (\r\n                <React.Fragment>\r\n                    <Link to=\"/\" className=\"ui green button\">\r\n                        Wróć\r\n                    </Link>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Link to={`/chart/temp/${match.params.id}`} className=\"ui green button\">\r\n                    Temperatura\r\n                </Link>\r\n                <Link to={`/chart/hum/${match.params.id}`} className=\"ui green button\">\r\n                    Wilgotność\r\n                </Link>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const getChartType = () => {\r\n        return match.path === '/chart/hum/:id' ? 'hum' : match.params.id === '4' ? 'tempOut' : 'temp';\r\n    };\r\n\r\n    const getSensorName = (id) => {\r\n        switch (id) {\r\n            case '1':\r\n                return 'sensor01';\r\n            case '2':\r\n                return 'sensor02';\r\n            case '3':\r\n                return 'sensor03';\r\n            case '4':\r\n                return 'sensor03';\r\n            case '5':\r\n                return 'sensor04';\r\n        }\r\n    };\r\n\r\n    if (props.data.today) {\r\n        return (\r\n            <ChartModal\r\n                data={[\r\n                    ...prepareRechartData(\r\n                        props.data.yesterday[getSensorName(match.params.id)],\r\n                        getSensorName(match.params.id),\r\n                        isOldData(props.data.today.date),\r\n                    ),\r\n                    ...prepareRechartData(\r\n                        props.data.today[getSensorName(match.params.id)],\r\n                        getSensorName(match.params.id),\r\n                        isOldData(props.data.today.date),\r\n                    ),\r\n                ]}\r\n                type={getChartType()}\r\n                actions={renderActions()}\r\n                onDismiss={() => history.push('/')}\r\n            />\r\n        );\r\n    } else {\r\n        return (\r\n            <ChartModal\r\n                xData={null}\r\n                yData={null}\r\n                type={match.path === '/chart/temp/:id' ? 'temp' : 'hum'}\r\n                actions={renderActions()}\r\n                onDismiss={() => history.push('/')}\r\n            />\r\n        );\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { useFetchTodayQuery } from '../../store';\r\nimport { LoadingComponent } from '../LoadingComponent';\r\nimport './ShowChart.css';\r\nimport { ShowChartUi } from './ui/ShowChartUi';\r\n\r\nexport const ShowChart = () => {\r\n    const { data, isLoading } = useFetchTodayQuery();\r\n\r\n    return <>{isLoading ? <LoadingComponent /> : <ShowChartUi data={data} />}</>;\r\n};\r\n","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport FooterMenu from './footer-menu/FooterMenu';\r\nimport { Header } from './header/Header';\r\nimport { HistoryComponent } from './history-component/HistoryComponent';\r\nimport { SensorsList } from './sensors-list/SensorList.js';\r\nimport { Settings } from './settings/Settings';\r\nimport { ShowChart } from './show-chart/ShowChart';\r\n\r\nexport const App: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <HashRouter>\r\n                <Header />\r\n                <Route path=\"/\" exact component={SensorsList} />\r\n                <Route path=\"/chart/temp/:id\" exact component={ShowChart} />\r\n                <Route path=\"/chart/hum/:id\" exact component={ShowChart} />\r\n                <Route path=\"/settings\" exact component={Settings} />\r\n                <Route path=\"/history\" exact component={HistoryComponent} />\r\n                <FooterMenu />\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n};\r\n","import * as dotenv from 'dotenv';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { App } from './components/App';\r\nimport { store } from './store';\r\ndotenv.config();\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}